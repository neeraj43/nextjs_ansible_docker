- name: Deploy Next.js App via Docker
  hosts: webserver
  become: yes
  vars:
    app_name: nextjs-app
    docker_image: nextjs-app:latest
    docker_container: nextjs-app
    app_port: 3000
    app_path: /opt/nextjs-app

  tasks:
    - name: Update Homebrew (macOS)
      community.general.homebrew:
        update_homebrew: yes
      when: ansible_facts['os_family'] == 'Darwin'
      become: false

    - name: Check if Docker Desktop is already installed (macOS)
      stat:
        path: /Applications/Docker.app
      register: docker_app_installed
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Ensure Docker is installed
      community.general.homebrew_cask:
        name: docker
        state: present
        update_homebrew: yes
      when: 
        - ansible_facts['os_family'] == 'Darwin'
        - not docker_app_installed.stat.exists
      become: false

    # - name: Ensure Docker service is running
    #   service:
    #     name: docker
    #     state: started
    #     enabled: yes

    - name: Create app directory
      file:
        path: "{{ app_path }}"
        state: directory

    # - name: Copy Next.js app to server (excluding node_modules)
    #   ansible.posix.synchronize:
    #     src: .
    #     dest: .
    #     rsync_opts:
    #       - "--exclude=node_modules"
    #   delegate_to: localhost


    - name: Build Docker image (path - your code path with docker file)
      community.docker.docker_image:
        name: nextjs-app
        tag: latest
        force_source: true
        source: build
        build:
          path: ./
      delegate_to: localhost


    - name: Stop existing container if running
      community.docker.docker_container:
        name: "{{ docker_container }}"
        state: absent
        force_kill: true

    - name: Run Docker container
      community.docker.docker_container:
        name: "{{ docker_container }}"
        image: "{{ docker_image }}"
        ports:
          - "3000:{{ app_port }}"
        restart_policy: always
